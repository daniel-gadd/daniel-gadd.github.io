<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

    <title><![CDATA[Daniel Gadd]]></title>
    <link href="http://www.gadd.co.nz/atom.xml" rel="self"/>
    <link href="http://www.gadd.co.nz/"/>
    <updated>2015-05-07T09:32:43+12:00</updated>
    <id>http://www.gadd.co.nz/</id>
    <author>
        <name><![CDATA[Daniel Gadd]]></name>
        
    </author>
    <generator uri="http://octopress.org/">Octopress</generator>

    
    <entry>
        <title type="html"><![CDATA[Better management of ssh config files]]></title>
        <link href="http://www.gadd.co.nz/blog/2015/05/05/better-management-of-ssh-config-files/"/>
        <updated>2015-05-05T19:54:19+12:00</updated>
        <id>http://www.gadd.co.nz/blog/2015/05/05/better-management-of-ssh-config-files</id>
        <content type="html"><![CDATA[<p>My ~./.ssh/config file was getting rather large and becoming a management nightmare. I have personal servers, work specific servers, domain wildcards
global wildcards etc etc. I&rsquo;d estimate I had close to 30 hosts in a single file.</p>

<p>I decided It would be better to split my master config out into smaller logical chunks and concatinate them all together everytime I call the &lsquo;ssh&rsquo; command.
This means I can easily find and logically order my Hosts in A way which works for me.</p>

<!--more-->


<h4>How does it work</h4>

<hr />

<p>Since ssh-client doesnt support an <code>include</code> style parameter in its .ssh/config file, i decided to create my own implimentation.</p>

<p>I split my configuration file into 4 logical chunks (there are more, but they&rsquo;re business sensitive - but 4 will give you an idea):</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cat ~/.ssh/conf.d/
</span><span class='line'>   000-header
</span><span class='line'>   100-personal
</span><span class='line'>   200-work-related
</span><span class='line'>   400-global</span></code></pre></td></tr></table></div></figure>


<p><br></p>

<p>As you can see, ive used numbering to create an order in assending order. Applying the header first and finally the global config which holds the <code>Host *</code> config which get applied to everything, unless its been specified further up.
Anything can go in the middle, or example I have chunk for only my personal servers and another one for work, effectively splitting them up.</p>

<p>You could use any logical arrangement here, location, IP address, server names etc. Allowing you to get granular if you wanted.</p>

<p>My ssh alias command calls <code>cat \*</code> across my ~/.ssh/conf.d/ folder; removes some vim comments to enable syntax highlighting; throws the generated file into ~/.ssh/config and Finally calls the &lsquo;ssh&rsquo; command.</p>

<p>Heres what my zsh command alias looks like:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">alias </span><span class="nv">ssh</span><span class="o">=</span><span class="s2">&quot;cat ~/.ssh/conf.d/\* |</span>
</span><span class='line'><span class="s2">  sed &#39;/vim: set/d&#39; &gt; ~/.ssh/config &amp;&amp;</span>
</span><span class='line'><span class="s2">  chmod 0600 ~/.ssh/config &amp;&amp; ssh&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>Note: I added newlines to the code snippet so it was readable.</em></p>

<h4>What my Host blocks look like:</h4>

<hr />

<p><br></p>

<h5>Heres my header file:</h5>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>\##################################################################
</span><span class='line'>\# SSH CONFIG FILE
</span><span class='line'>
</span><span class='line'>\# THIS FILE IS AUTOMATICALLY GENERATED - YOUR CHANGES WILL BE LOST.
</span><span class='line'>\# IF YOU NEED TO CHANGE IT, CHANGE CONFIGS IN ~/.ssh/conf.d/
</span><span class='line'>
</span><span class='line'>\# See ~/.ssh/conf.d/README.md for instructions</span></code></pre></td></tr></table></div></figure>


<p><br></p>

<h5>Global host configuration:</h5>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>\##################################################################
</span><span class='line'>\# Global SSH Config - applied to all ssh commands
</span><span class='line'>Host *
</span><span class='line'>    ## SSH keepalive and timeout Options ##
</span><span class='line'>    ServerAliveInterval 60
</span><span class='line'>    ServerAliveCountMax 5
</span><span class='line'>    VisualHostKey yes
</span><span class='line'>
</span><span class='line'>    ## Channel Control Multiplexer Options ##
</span><span class='line'>    ControlMaster auto
</span><span class='line'>    ControlPath ~/.ssh/sockets/%r@%h:%p
</span><span class='line'>    ControlPersist 4h
</span><span class='line'>
</span><span class='line'>    ## Specify secure ciphers and MAC algorythms
</span><span class='line'>    KexAlgorithms curve25519-sha256@libssh.org,diffie-hellman-group-exchange-sha256
</span><span class='line'>    HostKeyAlgorithms ssh-ed25519-cert-v01@openssh.com,ssh-rsa-cert-v01@openssh.com,ssh-rsa-cert-v00@openssh.com,ssh-ed25519,ssh-rsa
</span><span class='line'>    Ciphers chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes128-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr
</span><span class='line'>    MACs hmac-sha2-512-etm@openssh.com,hmac-sha2-256-etm@openssh.com,hmac-ripemd160-etm@openssh.com,umac-128-etm@openssh.com,hmac-sha2-512,hmac-sha2-256,hmac-ripemd160,umac-128@openssh.com
</span><span class='line'>
</span><span class='line'>    ## Dont hash knownhosts, so zsh autocompletion can read them ##
</span><span class='line'>    HashKnownHosts no
</span><span class='line'>
</span><span class='line'>##################################################################</span></code></pre></td></tr></table></div></figure>


<p><br>
A quick note on my global config above, i do use control multiplexers, they&rsquo;re not for everyone and if you don&rsquo;t fully understand how they work, they can be quite painful to deal with. Instead of talking about ssh multiplexing, have a read of <a href="http://blog.endpoint.com/2010/09/long-lasting-ssh-multiplexing-made.html">this</a> blog post.
I also specify a subset of secure Key Exchange and Host Key algorithms as by default there are some very insure ciphers enabled by default. Have a read of <a href="https://stribika.github.io/2015/01/04/secure-secure-shell.html">this</a> blog post which explains secure vs insecure ciphers and how to enable them serverside/clientside. - Note not all sshd servers and versions support the above ciphers and some, <em>github</em> will need to specify some insecure ciphers in its host block.</p>

<p>I hope this post has been useful to someone and thought I&rsquo;d share my setup.</p>

<h4>In Summary</h4>

<hr />

<p>Yes theres most likely a better implimentation and yes you might see it as rough, but its a good start and good foundation to work from to make it better.</p>

<p>I&rsquo;m still perfecting my ssh config setup and yet to run into any limitations or issues
(one issue im sure i&rsquo;ll encounter is rsync and scp as they wont update the config if they are called.
I guess as long as I call ssh after an update, all will be good. - Im not planning on updating my config &ldquo;that&rdquo; often.</p>

<p>I&rsquo;ll update here as I make better changes.</p>
]]></content>
    </entry>
    
    <entry>
        <title type="html"><![CDATA[Have you checked your security?]]></title>
        <link href="http://www.gadd.co.nz/blog/2015/03/10/test-your-physical-security/"/>
        <updated>2015-03-10T09:36:22+13:00</updated>
        <id>http://www.gadd.co.nz/blog/2015/03/10/test-your-physical-security</id>
        <content type="html"><![CDATA[<p><strong>Disclaimer: I take NO responsbility for personal or business damages and/or
technical alarm issues as a result of you following my blog post.</strong></p>

<p>Formalities out of the way &hellip;</p>

<p>We all have a fancy expensive alarm system in our work places, some more fancy
then others; motion sensors, cameras, biometrics, door bolts, lets face it, theres
alot of stuff here&hellip; But have you ever actually tested it?</p>

<!--more-->


<p>No, I don&rsquo;t mean the odd &ldquo;I came into work on the weekend and set it off&rdquo; excuse
given by staff who say &ldquo;Well it definitely worked&rdquo;. I mean testing the physical
security of your system as a burglar hoping to actually steal your sensitive financial and
company documents.</p>

<p>It&rsquo;s not something we think of when it comes to security, sure we get our
networks, web applications and business processes audited and tested by
auditors and ethical penetration testing consultants, but the physical alarm system
is never &ldquo;physically&rdquo; tested - We get it installed and take the installers word
that, &ldquo;Your all protected now&rdquo;, and for some reason, that&rsquo;s enough to keep our
worries at bay.
Imagine if your developers say, &ldquo;Oh yeah, our new Credit Card
database is all protected&rdquo; and you left it at that, our world would be a VERY
different place.</p>

<p>When it comes to testing your physical security, it&rsquo;s not recommended to just
&ldquo;go for it&rdquo; (Did someone say hack on prod?). You might find your staff, and
building neighbours may not appreciate it.
You need to create (setup) a test environment which is a copy of your real alarm, and
now, I don&rsquo;t mean go buy a whole new system just for testing, instead consult your alarm
security contractors about creating a test zone to act like the main system. - Unless of
course your one of these DIY &ldquo;she&rsquo;ll be right&rdquo; kinda guys who thinks they have the skill to
program it, them go right ahead.</p>

<p>Next, identify potential targets such as financial documents, important servers
or anything business critical. These should be targets which would be of interest
to anyone breaking in, whether they have insider knowledge or not. These targets
should be what you concentrate on &ldquo;testing&rdquo; and in future require careful planning
and protecting.</p>

<p>Finally, inform your monitoring company of your actions, or tell
them to ignore any alerts they recieve while you &ldquo;test&rdquo;. Who wants Mr Plod showing up to your
building as you attempt to break in? At least you could always try the &ldquo;I
Locked my keys inside&rdquo; excuse and see how that fly&rsquo;s&hellip;</p>

<p>Now you have set yourself up, think up some creative ways to &ldquo;break in&rdquo;,
have a look around your offices; are the doors secure;
can you climb the walls; can you move undetected from motion sensors? Cameras? etc, etc&hellip;
I Find Google has the best ideas and solutions to problems you might overcome
when trying to bypass a motion sensor.</p>

<p>A few simple words of advice:</p>

<ol>
<li><p>Be safe, you could find yourself dropping from
heights or doing something physically demanding, always have a look at whats
load bearing and stable.</p></li>
<li><p>Watch out for fire alarm cables. Sometimes you can&rsquo;t make a test environment
for everything. There&rsquo;s nothing worse than an expensive false callout fee (or
two) and even worse, setting the sprinklers off all over your perfectly
good not-on-fire office assets. - Your insurance company may not like you
very much.</p></li>
<li><p>Go slow and take your time. Your here to test, it&rsquo;s not a time trial. I&rsquo;ve
never heard of a criminal who stated his break-in was timed. You&rsquo;re in
control, take your time, look at everything, explore routes etc. If you set
off your test alarm. reset it and start again.</p></li>
<li><p>Don&rsquo;t break anything. This could be dangerous and costly to you and your
business, theres nothing worse than breaking your managers&#8217; new expensive oak
desk by stepping in the wrong place.</p></li>
</ol>


<p>You now have a repeatable test environment, which can be used to test your
physical security, over and over again. If you make changes or add new security
devices, simply update your test environment and have a go.</p>

<p>We recently underwent this process when a co-worker researching RFID swipe
cards managed to clone our access cards, rendering them unsecure, because of
this we started exploring what would happen if someone entered our building.
What can they do and, what could they take?</p>

<p>With that, we closed our office, set up a test alarm area, disabled the ear
piercing siren and told our monitoring company to ignore everything and played
a simple Capture the Flag game where we all took turns breaking in.</p>

<p>Unfortunately the results were not what we thought, it was somewhat easier then
we expected. We had people record pin numbers, climb walls, break tiles and
leave dirty shoe marks on our walls - All in an attempt to grab a nice cold
alcoholic beverage from our &ldquo;secure&rdquo; area.</p>

<p>This exercise was a wakeup call and allowed us to see what flaws we have,
instead of letting a security installer tell us it&rsquo;s all OK.</p>

<p>I Recommend that every business should actively test their phyiscal security, wheither you yourself
or an independent contractor do it. This should be annaully, or when things change in the business.</p>

<p>Lets face it, its better you find your security holes before a would-be criminal does, so you can
fix them before it&rsquo;s too late.</p>

<p>So, in conclusion, here is my helpful advice again to avoid problems:</p>

<ul>
  <li>Always be safe!</li>
  <li>Create a dummy test zone which mirrors your usual alarm area/s.</li>
  <li>Look out of fire alarm cables, fire engine callouts are not cheap.</li>
  <li>Tell your monitoring company to ignore anything they receive.</li>
  <li>Create goals for your testers.</li>
  <li>Play it slow and safe, if something&#8217;s not right, stop and have a look.</li>
  <li>And finally&#8230; Have Fun!</li>
</ul>

]]></content>
    </entry>
    
    <entry>
        <title type="html"><![CDATA[Cloning Your Octopress Blog]]></title>
        <link href="http://www.gadd.co.nz/blog/2015/02/10/cloning-your-octopress-blog/"/>
        <updated>2015-02-10T08:43:56+13:00</updated>
        <id>http://www.gadd.co.nz/blog/2015/02/10/cloning-your-octopress-blog</id>
        <content type="html"><![CDATA[<p>I&rsquo;ve spent hours and many &lsquo;dud&rsquo; commits to my github repository trying to figure
out too re-clone my octopress repository to either my current development
computer, or too another one. I have found one working solution.</p>

<!--more-->


<p><strong>Attempt 1: Straight Clone: Failed</strong> - Dont clone only the master branch as this
only contains your site static code and not the development branch.</p>

<p><strong>Attempt 2: Clone source branch: Failed</strong> - I have the correct source but no
static content on the master branch.</p>

<p><strong>Attempt 3: Git Submodules: Failed</strong> - Dont use submodules to manage the master
branch - They&rsquo;ll give you a world of hurt and constant commit hash errors when
you deploy your site with changes.</p>

<p><strong>Attempt 4: Clone into _deploy: Sucess!</strong> - This works a treat as I realised
<code>_deploy</code> is in the default <code>.gitignore</code> file of octopress. So it wont error on
changes or be commited up when you push the source branch.</p>

<p><strong>How I Got There:</strong></p>

<ol>
<li><code>git clone -b source https://github.com/daniel-gadd/daniel-gadd.github.io</code></li></li>
<li><code>cd daniel-gadd.github.io</code></li></li>
<li>Accept <code>.rvmrc</code>, allowing rvm to create a gemset and bundler install to the gems</li></li>
<li><code>git clone -b master https://github.com/daniel-gadd/daniel-gadd.github.io ./_deploy</code></li></li>
</ol>


<p>Thats it!</p>

<p>You dont need to re-set up the github pages configuration as this is already setup in the gitrepo</p>

<p><strong>NB:</strong> Remember to push both your source and master branches after each change, if your working on two computers, your local repos can get out of sync badly requiring some rebasing and merging.</p>
]]></content>
    </entry>
    
    <entry>
        <title type="html"><![CDATA[Zaw Plugin]]></title>
        <link href="http://www.gadd.co.nz/blog/2015/02/04/zaw-plugin/"/>
        <updated>2015-02-04T12:44:15+13:00</updated>
        <id>http://www.gadd.co.nz/blog/2015/02/04/zaw-plugin</id>
        <content type="html"><![CDATA[<h3>What is zaw</h3>

<p>Zaw is zsh plugin which acts like a widget to bring together a wealth of resources
making it easier to find what you need in you shell.</p>

<!-- more -->


<h3>How do I use it</h3>

<p>I use zaw mainly to replace the reverise lookup functionality of zsh, why?
Because zaw allows wildcard and incomplete searching of commands as well as a
nice scrollable list.</p>

<p>I also like it because I can hit <code>tab</code> and get an option to edit the histroy
command in the buffer before executing it.</p>

<h3>Installation</h3>

<p>My installation is available off my dotfiles repo, but if want to install this
manually - to how I run it, follow these steps:</p>

<p>Im making an assumption you&rsquo;re using the <a href="https://github.com/robbyrussell/oh-my-zsh">oh-my-zsh</a> framework.</p>

<h4>Step 1: Clone the repo</h4>

<p><code>git clone git://github.com/zsh-users/zaw.git</code></p>

<h4>Step 2: Update zaw plugin</h4>

<p>We want to update the zaw plugin code to use ^R key binding, and to limit the output to 10 lines,
do to this open <code>zaw.plugin.zsh</code> file in the root of the zaw repo and update the following lines:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bindkey '^R' zaw-history
</span><span class='line'>  bindkey '^Z' zaw
</span><span class='line'>
</span><span class='line'>  #zstyle ':filter-select:highlight' matched fg=green
</span><span class='line'>  zstyle ':filter-select' max-lines 15
</span><span class='line'>  zstyle ':filter-select' rotate-list yes
</span><span class='line'>  zstyle ':filter-select' case-insensitive yes
</span><span class='line'>  zstyle ':filter-select' extended-search yes # see https://github.com/zsh-users/zaw for explanation</span></code></pre></td></tr></table></div></figure>


<h4>Step 3: Setup zshrc opts</h4>

<p>Here we want to disable search dups in our history as zaw by default loads your entire history file,
which can make it bloated, slow and hard to get what you want fast.</p>

<p>Add the following options to your <code>~/.zshrc</code> file:</p>

<figure class='code'><figcaption><span>~/.zshrc </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>setopt APPEND_HISTORY
</span><span class='line'>setopt EXTENDED_HISTORY
</span><span class='line'>setopt INC_APPEND_HISTORY
</span><span class='line'>setopt HIST_FIND_NO_DUPS
</span><span class='line'>setopt HIST_IGNORE_SPACE
</span><span class='line'>setopt NO_HIST_BEEP
</span><span class='line'>setopt SHARE_HISTORY
</span><span class='line'>setopt HIST_IGNORE_ALL_DUPS
</span><span class='line'>setopt HIST_IGNORE_DUPS</span></code></pre></td></tr></table></div></figure>


<h4>Step 4: Reload zsh</h4>

<p>Lastly reload your zsh shell by using <code>source ~/.zshrc</code> or loading a new terminal window.</p>
]]></content>
    </entry>
    
    <entry>
        <title type="html"><![CDATA[Notes on Octopress]]></title>
        <link href="http://www.gadd.co.nz/blog/2015/02/04/notes-on-octopress/"/>
        <updated>2015-02-04T11:10:31+13:00</updated>
        <id>http://www.gadd.co.nz/blog/2015/02/04/notes-on-octopress</id>
        <content type="html"><![CDATA[<p>Here are a few notes and code snippets I use to manage octopress, They arnt
exactly new, just needed a place to put them incase I forget.</p>

<!-- more -->


<p><strong>Create A new blog entry:</strong></p>

<p><code>rake new_post["My Post Name Here"]</code></p>

<p><strong>Preview my development code locally:</strong></p>

<p><code>rake preview</code></p>

<p><strong>Generate public code ready to deploy:</strong></p>

<p><code>rake generate</code></p>

<p><strong>Deploy my code to github:</strong></p>

<p><code>rake deploy</code></p>

<p><strong>Push my source code up to the source branch:</strong></p>

<p><code>git push origin source</code></p>

<p>Ill add to these as I see fit or incase i need more commands to jog my memory.</p>
]]></content>
    </entry>
    
    <entry>
        <title type="html"><![CDATA[My First Post]]></title>
        <link href="http://www.gadd.co.nz/blog/2015/02/04/my-first-post/"/>
        <updated>2015-02-04T08:49:04+13:00</updated>
        <id>http://www.gadd.co.nz/blog/2015/02/04/my-first-post</id>
        <content type="html"><![CDATA[<p>This is my first blog post. Hopefully It wont be my last.</p>

<p>I will hopefully use this blog to post useful information and stuff which i dont want to forget</p>
]]></content>
    </entry>
    
</feed>
